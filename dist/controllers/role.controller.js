"use strict";var _role2=require("../models/role"),_role3=_interopRequireDefault(_role2);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var roleController=function(){return{add:function(e,o,s){var n=e.body.label,r=e.body.permissions?e.body.permissions:[];if(!n)return o.status(422).send({error:"You must enter a role label."});_role3.default.findOne({label:n},function(e,t){if(e)o.status(500).send(e);else if(t)o.status(422).json({error:"This role already exists."});else{var l=new _role3.default({label:n,permissions:r});l.save(function(e){if(e)return s(e);l.populate("permissions",function(e,s){o.status(201).json(s)})})}})},edit:function(e,o){e.role.label=e.body.label,e.role.permissions=e.body.permissions,e.role.save(function(e,s){e?o.status(500).send(e):o.json(s)})},find:function(e,o){o.json(e.role)},findAll:function(e,o){_role3.default.find({}).populate("permissions").exec(function(e,s){e?o.status(500).send(e):o.json(s)})},middleware:function(e,o,s){_role3.default.findById(e.params.id).populate("permissions").exec(function(n,r){n?o.status(500).send(n):r?(e.role=r,s()):o.status(404).send("No role found")})},remove:function(e,o){e.role.remove(function(e){e?o.status(500).send(e):o.status(204).send("Successfully removed")})}}};module.exports=roleController;